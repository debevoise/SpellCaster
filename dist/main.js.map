{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.js","webpack:///./src/keywords.js","webpack:///./src/spell.js","webpack:///./src/snake.js","webpack:///./src/sampletext.js","webpack:///./src/typetest.js","webpack:///./src/grid.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","addCoordinates","a1","a2","replaceChildren","parent","child","firstChild","removeChild","appendChild","keywords","all","type","clear","spell","snake","test","circle","fast","action","slow","big","little","up","down","left","right","comic","sans","fun","mono","serif","blue","green","yellow","purple","orange","pink","black","red","emoji","hello","madeby","foo","explode","Spell","grid","this","perFrameKeywords","appliedKeywords","currentPos","randomPosition","storedText","activeText","keywordIndex","rotate","classArr","moves","colors","font","size","renderedElements","input","toLowerCase","extractKeywords","render","slice","length","Array","notStored","forEach","kw","applyKeyword","includes","push","Util","framerate","playSnake","newfps","Math","floor","newsize","spells","clearPreviousRender","generateRandomSpell","cast","playTypetest","delta","pos","char","exploded","dirs","appliedDirs","firstDirIdx","containsKeyword","substr","str","keys","ele","remove","shift","random","receive","text","sign","letter","charCodeAt","span","document","createElement","textContent","toUpperCase","classList","add","style","fontSize","backgroundColor","shuffleColors","color","getElement","currentSpell","className","Snake","position","positions","head","innerText","body","inst","loserSpell","points","height","width","coordList","coord","res","nextPosition","xy","outOfBounds","handleLoss","isEmpty","unshift","pop","eat","combinedDirs","oppositeDir","snack","element","validwords","split","filter","word","sampleText","range","TypeTest","calculatePos","userWords","currentWord","badkeystrokes","renderedWordBegin","renderedWordEnd","numRows","currentTime","topWords","ensureUserWords","calculateWPM","exitTypetest","correctKeystrokes","mistyped","now","Date","getTime","timesUp","over","renderPadding","renderWordDisplay","renderInput","top","j","el","inputwidth","timeStart","time","calculateTime","wordsRendered","firstColLength","row","col","wordIdx","renderedWord","renderCoord","renderWord","timeLeft","sec","toString","idx","typeStart","wordBegin","status","eleCoord","innerHTML","inputRE","RegExp","randIdx","ceil","e","keyCode","nextWord","validateCurrentWord","Grid","root","CELLSIZE","cursorPos","offsetHeight","offsetWidth","typetest","populate","play","keywordsList","getElementById","logo","onclick","nextSpell","li","resizeGrid","receiveInput","receiveClick","addEventListener","target","dataset","window","onresize","rowArr","cell","clearGridElements","snakeMode","prevSpell","coordinates","x","y","lastSpell","centerPos","posArr","map","parseInt","keycode","deleteCharacter","updateCurrentPosition","diff","trimSpells","move","rate","timeout","setTimeout","frame","animate"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/dist/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export function addCoordinates(a1, a2) {\n    return [a1[0] + a2[0], a1[1] + a2[1]];\n}\n\nexport function addBoundedCoordinates(a1, a2, grid) {\n    let x = a1[0] + a2[0]\n    let y = a1[1] + a2[1];\n    x = x % grid.height;\n    y = y % grid.width;\n    if (x < 0) x += grid.height;\n    if (y < 0) y += grid.width;\n    return [x,y]\n}\n\nexport function replaceChildren(parent, child) {\n    while (parent.firstChild) {\n        parent.removeChild(parent.firstChild);\n    }\n\n    parent.appendChild(child);\n}\n\nexport function equalCoordinates(a1, a2) {\n    return a1[0] === a2[0] && a1[1] === a2[1];\n}\n\nexport function includesCoordinates(coordList, coord) {\n    let res = false;\n\n    coordList.forEach(xy => {\n        if (equalCoordinates(xy, coord)) {\n            res = true;\n        }\n    });\n\n    return res;\n}\n\nexport function toEmoji(str) {\n    str = str.toLowerCase();\n\n    let EMOJIS = [\n      \"😠\",\n      \"😳\",\n      \"👨‍👨‍👦\",\n      \"🍆\",\n      \"🐵\",\n      \"🐱\",\n      \"💩\",\n      \"🌞\",\n      \"🌈\",\n      \"🌊\",\n      \"🗽\",\n      \"🛸\",\n      \"👨‍👨‍👦\",\n      \"🥓\",\n      \"👌\",\n      \"🏞\",\n      \"🎢\",\n      \"🚖\",\n      \"🍩\",\n      \"🍔\",\n      \"🇮🇷\",\n      \"🤥\",\n      \"👂\",\n      \"☢\",\n      \"🈵\",\n      \"🤣\"\n    ];\n\n\n    let code = str.charCodeAt(0) - 97;\n    return EMOJIS[code];\n}","const keywords = {\n  all: { type: \"all\" },\n  clear: { type: \"clear\" },\n  spell: { type: \"spell\" },\n  snake: { type: \"snake\" },\n  type: { type: \"typetest\" },\n  test: { type: \"typetest\" },\n  circle: { type: \"circle\" },\n  fast: { type: \"speed\", action: 0.8 },\n  slow: { type: \"speed\", action: 1.25 },\n  big: { type: \"fontsize\", action: 1.25 },\n  little: { type: \"fontsize\", action: 0.8 },\n  up: { type: \"move\", action: [-1, 0] },\n  down: { type: \"move\", action: [1, 0] },\n  left: { type: \"move\", action: [0, -1] },\n  right: { type: \"move\", action: [0, 1] },\n  comic: { type: \"font\", action: \"comic\" },\n  sans: { type: \"font\", action: \"sans\" },\n  fun: { type: \"font\", action: \"fun\" },\n  mono: { type: \"font\", action: \"mono\" },\n  serif: { type: \"font\", action: \"serif\" },\n  blue: { type: \"color\", action: \"#5798ad\" },\n  green: { type: \"color\", action: \"#57ad6e\" },\n  yellow: { type: \"color\", action: \"#dbc035\" },\n  purple: { type: \"color\", action: \"#9d64e3\" },\n  orange: { type: \"color\", action: \"#e67e39\" },\n  pink: { type: \"color\", action: \"#f20aee\" },\n  black: { type: \"color\", action: \"#222e2c\" },\n  red: { type: \"color\", action: \"#de481b\" },\n  emoji: { type: \"emoji\" },\n  hello: { type: \"text\", action: \"world\" },\n  madeby: { type: \"text\", action: \" simon debevoise\" },\n  foo: { type: \"text\", action: \"bar\" },\n  explode: { type: \"explode\" }\n  // help: { type: \"text\", action: \" I can't\" }\n};\n\nexport default keywords;\n\n// TODO: \n// rotate, snake, typetest, about, index,  ","import Grid from './grid';\nimport * as Util from './util'\nimport keywordIndex from './keywords';\n\nexport default class Spell {\n    constructor(grid) {\n        this.perFrameKeywords = [];\n        this.appliedKeywords = [];\n        this.grid = grid;\n        this.currentPos = this.grid.randomPosition();\n\n        this.storedText = '';\n        this.activeText = '';\n\n        this.keywordIndex = keywordIndex;\n\n        this.rotate = null;\n        this.classArr = [];\n        this.moves = [0,0];\n        this.colors = [];\n        this.font = 'mono';\n        this.size = 15;\n\n        this.renderedElements = [];\n    }\n\n    receive(input) {\n        this.activeText += input.toLowerCase();\n        this.extractKeywords();\n        this.render();\n    }\n\n    deleteCharacter() {\n        if (this.activeText) {\n            this.activeText = this.activeText.slice(0, this.activeText.length - 1);\n        } \n    }\n\n    cast(keywords) {\n        if (!(keywords instanceof Array)) keywords = [keywords];\n        const notStored = ['all', 'clear', 'spell', 'snake', 'test', 'explode'];\n\n        keywords.forEach(kw => {\n            this.applyKeyword(kw);\n            if (!notStored.includes(kw)) this.appliedKeywords.push(kw); \n        });\n    }\n\n    applyKeyword(kw) {\n        if (!this.keywordIndex[kw]) return;\n        let { action, type } = this.keywordIndex[kw];\n        \n        switch (type) {\n            case 'move':\n                this.moves = Util.addCoordinates(this.moves, action)\n                break;\n            case 'color': \n                this.colors.push(action);\n                break;\n            case 'rotate':\n                this.rotate = this.rotate ? null : 'rotate';\n                break;\n            case 'font':\n                this.emoji = false;\n                this.font = action;\n                break;\n            case 'snake':\n                this.grid.framerate = 150;\n                this.grid.playSnake();\n                break;\n            case 'speed':\n                let newfps = Math.floor(this.grid.framerate * action);\n                if (newfps > 4000) {\n                  this.grid.framerate = 40000;\n                } else if (newfps < 100) {\n                  this.grid.framerate = 100;\n                } else {\n                  this.grid.framerate = newfps;\n                }\n                break;\n            case 'text':\n                this.storedText += action;\n                break;\n            case 'fontsize':\n                let newsize = Math.floor(this.size * action);\n                if (newsize > 40) {\n                    this.size = 40;\n                } else if (newsize < 6) {\n                    this.size = 6;\n                } else {\n                    this.size = newsize;\n                }\n                break;\n            case 'circle':\n                this.classArr.push('circle');\n                break;\n            case 'clear':\n                this.grid.spells.forEach(spell => spell.clearPreviousRender());\n                this.grid.spells = [];\n                break;\n            case 'emoji':\n                this.emoji = true;\n                break;\n            case 'spell':\n                this.generateRandomSpell();\n                break;\n            case 'all':\n                this.grid.spells.forEach(spell => spell.cast(this.appliedKeywords));\n                break;\n            case 'typetest':\n                this.grid.playTypetest();\n                break;\n            case 'explode':\n                let delta;\n                if (this.moves[0] === 0 && this.moves[1] === 0) {\n                    delta = [0, 1];\n                } else {\n                    delta = this.moves\n                }\n\n                let pos = this.currentPos;\n\n                for (let i = 0; i < this.storedText.length; i++) {\n                    let char = this.storedText[i];\n                    let spell = new Spell(this.grid);\n                    spell.cast(this.appliedKeywords);\n                    spell.currentPos = pos;\n                    spell.exploded = true;\n                    let dirs = [ 'left', 'up', 'right', 'down' ]\n                    let appliedDirs = [];\n                    let firstDirIdx = Math.floor((i % 8) / 2);\n                    appliedDirs.push(dirs[firstDirIdx]);\n                    if (i % 2 === 1) appliedDirs.push(dirs[(firstDirIdx + 1) % 4])\n\n                    spell.cast(appliedDirs);\n                    spell.storedText = char;\n                    \n                    this.grid.spells.push(spell);\n\n                    pos = Util.addCoordinates(pos, delta);\n                }   \n\n                this.storedText = \"\";\n\n                break;\n            default:\n                break;\n        }\n        this.render();\n    }\n\n    extractKeywords() {\n        if (!this.containsKeyword(this.activeText)) return;\n\n        for (let i = 2; i <= this.activeText.length; i++) {\n            let substr = this.activeText.slice(0, i);\n            let kw = this.containsKeyword(substr);\n\n            if (kw) {\n                this.storedText += substr;\n                this.cast(kw);\n                this.activeText = this.activeText.slice(i);\n                this.extractKeywords();\n            }\n        } \n    }\n\n    containsKeyword(str) {\n        let kws = Object.keys(this.keywordIndex);\n        \n        for (let kw of kws) { \n            if (str.includes(kw)) return kw;\n        }\n        return false;\n    }\n\n    clearPreviousRender() {\n        this.renderedElements.forEach(ele => ele.remove());\n    }\n\n    move() {\n        this.currentPos = Util.addCoordinates(this.currentPos, this.moves);\n        this.render();\n    }\n\n    shuffleColors() {\n        if (this.colors.length === 0) return 'none';\n        if (this.colors.length === 1 ) return this.colors[0]\n        this.colors.push(this.colors.shift());\n        return this.colors[0];\n    }\n\n    generateRandomSpell() {\n        let keywords = Object.keys(this.keywordIndex);\n        let appliedKeywords = '';\n\n        for (let i = 0; i < 4; i++) {\n            let randIdx = Math.floor(Math.random() * (keywords.length - 6)) + 6; \n            appliedKeywords += keywords[randIdx];\n        }\n        let spell = new Spell(this.grid);\n        spell.receive(appliedKeywords);\n        this.grid.spells.push(spell);\n        return spell;\n    }\n\n\n    render() {\n        this.clearPreviousRender();\n\n\n        let text = this.storedText + this.activeText;\n        let pos = this.currentPos;\n        let delta;\n        if (this.moves[0] === 0 && this.moves[1] === 0) {\n            delta = [0,1];\n        } else {\n            let x = Math.sign(this.moves[0]);\n            let y = Math.sign(this.moves[1]);\n            delta = [x,y];\n        }\n\n        for (let i = 0; i < text.length; i++) {\n            const letter = this.emoji ? Util.toEmoji(text[i]) : text[i];\n            const span = document.createElement('span');\n\n            span.textContent = letter.toUpperCase();\n            span.classList.add(this.font, this.rotate, 'active', ...this.classArr);\n            span.style.fontSize = this.size + 'px';\n            span.style.backgroundColor = this.shuffleColors();\n\n            if (this.colors.length > 0) {\n                span.style.color = 'white'; \n            } else if (this.exploded) span.style.color = \"#de481b\";\n            \n            const element = this.grid.getElement(pos);\n            \n            Util.replaceChildren(element, span);\n            this.renderedElements.push(span);\n            pos = Util.addCoordinates(pos, delta);\n        }\n\n        if (this.grid.currentSpell === this) {\n            const span = document.createElement(\"span\");\n            span.className = 'cursor';\n            const element = this.grid.getElement(pos);\n            Util.replaceChildren(element, span);\n            this.renderedElements.push(span);\n        };\n    }\n\n}\n\n","import { addCoordinates, replaceChildren, includesCoordinates } from \"./util\";\nimport Spell from \"./spell\";\n\nexport class Snake {\n    constructor(grid, position) {\n        this.moves = [0,0];\n        this.positions = [position];\n        this.renderedElements = [];\n        this.grid = grid;\n\n        let head = document.createElement(\"span\");\n        head.className = 'snakehead';\n        head.innerText = \"🐍\";\n        this.body = [head]; // [{ element: <span>, pos: }]\n\n        let inst = new Spell(this.grid);\n        inst.storedText = 'arrow keys to move';\n        inst.moves = [0, 1];\n        inst.cast(['green', 'blue']);\n        this.inst = inst;\n        this.grid.spells.push(inst);\n    }\n\n    isEmpty(pos) {\n        let res = !this.grid.getElement(pos).firstChild;\n        return res;\n    }\n\n    getPoints() {\n        return this.positions.length - 1;\n    }\n\n    handleLoss() {\n        this.clearPreviousRender();\n        let loserSpell = this.inst;\n        \n        loserSpell.cast(['orange','fun','big','big','big']);\n        let score = this.body.length - 1;\n        let points = score === 1 ? ' point' : ' points';\n        loserSpell.storedText = 'Game over: ' + (this.body.length - 1) + points;\n        this.grid.currentSpell = new Spell(this.grid);\n    }\n\n    clearPreviousRender() {\n        this.renderedElements.forEach(ele => ele.remove());\n        this.renderedElements = [];\n    }\n\n    outOfBounds(pos) {\n        return (pos[0] >= this.grid.height || \n            pos[0] < 0 || \n            pos[1] >= this.grid.width || \n            pos[1] < 0)\n    }\n\n    move() {\n        if (!this.moves[0] && !this.moves[1]) {\n            this.render();\n            return;\n        } \n\n        let nextPosition = addCoordinates(this.positions[0], this.moves, this.grid)\n\n        if (includesCoordinates(this.positions, nextPosition) || \n            this.outOfBounds(nextPosition)) {\n\n            this.handleLoss()\n            return;\n        } else if (!this.isEmpty(nextPosition)) {\n            this.positions.unshift(nextPosition);\n            this.eat(nextPosition)\n        } else {\n            this.positions.unshift(nextPosition);\n            this.positions.pop();\n        }\n        this.render();\n    }\n\n    receiveInput(delta) {\n        let combinedDirs = addCoordinates(delta, this.moves);\n        let oppositeDir = combinedDirs[0] === 0 && combinedDirs[1] === 0;\n\n        if (this.positions.length === 1 || !oppositeDir) { \n            this.moves = delta;\n        } \n        \n    }\n\n    eat(pos) {\n        let snack = this.grid.getElement(pos).firstChild;\n        this.body.push(snack);\n    }\n\n    generateRandomSpell() {\n        let utilSpell = new Spell(this.grid);\n        utilSpell.generateRandomSpell();\n    };\n\n    render() {\n        this.clearPreviousRender();\n\n        this.positions.forEach((pos, i) => {\n            let element = this.grid.getElement(pos);\n            let child = this.body[i];\n            child.classList.add('snake')\n            replaceChildren(element, child);\n\n            this.renderedElements.push(child);\n        })\n    }\n}","let top1000 = `the\nof\nto\nand\na\nin\nis\nit\nyou\nthat\nhe\nwas\nfor\non\nare\nwith\nas\nI\nhis\nthey\nbe\nat\none\nhave\nthis\nfrom\nor\nhad\nby\nnot\nword\nbut\nwhat\nsome\nwe\ncan\nout\nother\nwere\nall\nthere\nwhen\nup\nuse\nyour\nhow\nsaid\nan\neach\nshe\nwhich\ndo\ntheir\ntime\nif\nwill\nway\nabout\nmany\nthen\nthem\nwrite\nwould\nlike\nso\nthese\nher\nlong\nmake\nthing\nsee\nhim\ntwo\nhas\nlook\nmore\nday\ncould\ngo\ncome\ndid\nnumber\nsound\nno\nmost\npeople\nmy\nover\nknow\nwater\nthan\ncall\nfirst\nwho\nmay\ndown\nside\nbeen\nnow\nfind\nany\nnew\nwork\npart\ntake\nget\nplace\nmade\nlive\nwhere\nafter\nback\nlittle\nonly\nround\nman\nyear\ncame\nshow\nevery\ngood\nme\ngive\nour\nunder\nname\nvery\nthrough\njust\nform\nsentence\ngreat\nthink\nsay\nhelp\nlow\nline\ndiffer\nturn\ncause\nmuch\nmean\nbefore\nmove\nright\nboy\nold\ntoo\nsame\ntell\ndoes\nset\nthree\nwant\nair\nwell\nalso\nplay\nsmall\nend\nput\nhome\nread\nhand\nport\nlarge\nspell\nadd\neven\nland\nhere\nmust\nbig\nhigh\nsuch\nfollow\nact\nwhy\nask\nmen\nchange\nwent\nlight\nkind\noff\nneed\nhouse\npicture\ntry\nus\nagain\nanimal\npoint\nmother\nworld\nnear\nbuild\nself\nearth\nfather\nhead\nstand\nown\npage\nshould\ncountry\nfound\nanswer\nschool\ngrow\nstudy\nstill\nlearn\nplant\ncover\nfood\nsun\nfour\nbetween\nstate\nkeep\neye\nnever\nlast\nlet\nthought\ncity\ntree\ncross\nfarm\nhard\nstart\nmight\nstory\nsaw\nfar\nsea\ndraw\nleft\nlate\nrun\ndon't\nwhile\npress\nclose\nnight\nreal\nlife\nfew\nnorth\nopen\nseem\ntogether\nnext\nwhite\nchildren\nbegin\ngot\nwalk\nexample\nease\npaper\ngroup\nalways\nmusic\nthose\nboth\nmark\noften\nletter\nuntil\nmile\nriver\ncar\nfeet\ncare\nsecond\nbook\ncarry\ntook\nscience\neat\nroom\nfriend\nbegan\nidea\nfish\nmountain\nstop\nonce\nbase\nhear\nhorse\ncut\nsure\nwatch\ncolor\nface\nwood\nmain\nenough\nplain\ngirl\nusual\nyoung\nready\nabove\never\nred\nlist\nthough\nfeel\ntalk\nbird\nsoon\nbody\ndog\nfamily\ndirect\npose\nleave\nsong\nmeasure\ndoor\nproduct\nblack\nshort\nnumeral\nclass\nwind\nquestion\nhappen\ncomplete\nship\narea\nhalf\nrock\norder\nfire\nsouth\nproblem\npiece\ntold\nknew\npass\nsince\ntop\nwhole\nking\nspace\nheard\nbest\nhour\nbetter\ntrue\nduring\nhundred\nfive\nremember\nstep\nearly\nhold\nwest\nground\ninterest\nreach\nfast\nverb\nsing\nlisten\nsix\ntable\ntravel\nless\nmorning\nten\nsimple\nseveral\nvowel\ntoward\nwar\nlay\nagainst\npattern\nslow\ncenter\nlove\nperson\nmoney\nserve\nappear\nroad\nmap\nrain\nrule\ngovern\npull\ncold\nnotice\nvoice\nunit\npower\ntown\nfine\ncertain\nfly\nfall\nlead\ncry\ndark\nmachine\nnote\nwait\nplan\nfigure\nstar\nbox\nnoun\nfield\nrest\ncorrect\nable\npound\ndone\nbeauty\ndrive\nstood\ncontain\nfront\nteach\nweek\nfinal\ngave\ngreen\noh\nquick\ndevelop\nocean\nwarm\nfree\nminute\nstrong\nspecial\nmind\nbehind\nclear\ntail\nproduce\nfact\nstreet\ninch\nmultiply\nnothing\ncourse\nstay\nwheel\nfull\nforce\nblue\nobject\ndecide\nsurface\ndeep\nmoon\nisland\nfoot\nsystem\nbusy\ntest\nrecord\nboat\ncommon\ngold\npossible\nplane\nstead\ndry\nwonder\nlaugh\nthousand\nago\nran\ncheck\ngame\nshape\nequate\nhot\nmiss\nbrought\nheat\nsnow\ntire\nbring\nyes\ndistant\nfill\neast\npaint\nlanguage\namong\ngrand\nball\nyet\nwave\ndrop\nheart\nam\npresent\nheavy\ndance\nengine\nposition\narm\nwide\nsail\nmaterial\nsize\nvary\nsettle\nspeak\nweight\ngeneral\nice\nmatter\ncircle\npair\ninclude\ndivide\nsyllable\nfelt\nperhaps\npick\nsudden\ncount\nsquare\nreason\nlength\nrepresent\nart\nsubject\nregion\nenergy\nhunt\nprobable\nbed\nbrother\negg\nride\ncell\nbelieve\nfraction\nforest\nsit\nrace\nwindow\nstore\nsummer\ntrain\nsleep\nprove\nlone\nleg\nexercise\nwall\ncatch\nmount\nwish\nsky\nboard\njoy\nwinter\nsat\nwritten\nwild\ninstrument\nkept\nglass\ngrass\ncow\njob\nedge\nsign\nvisit\npast\nsoft\nfun\nbright\ngas\nweather\nmonth\nmillion\nbear\nfinish\nhappy\nhope\nflower\nclothe\nstrange\ngone\njump\nbaby\neight\nvillage\nmeet\nroot\nbuy\nraise\nsolve\nmetal\nwhether\npush\nseven\nparagraph\nthird\nshall\nheld\nhair\ndescribe\ncook\nfloor\neither\nresult\nburn\nhill\nsafe\ncat\ncentury\nconsider\ntype\nlaw\nbit\ncoast\ncopy\nphrase\nsilent\ntall\nsand\nsoil\nroll\ntemperature\nfinger\nindustry\nvalue\nfight\nlie\nbeat\nexcite\nnatural\nview\nsense\near\nelse\nquite\nbroke\ncase\nmiddle\nkill\nson\nlake\nmoment\nscale\nloud\nspring\nobserve\nchild\nstraight\nconsonant\nnation\ndictionary\nmilk\nspeed\nmethod\norgan\npay\nage\nsection\ndress\ncloud\nsurprise\nquiet\nstone\ntiny\nclimb\ncool\ndesign\npoor\nlot\nexperiment\nbottom\nkey\niron\nsingle\nstick\nflat\ntwenty\nskin\nsmile\ncrease\nhole\ntrade\nmelody\ntrip\noffice\nreceive\nrow\nmouth\nexact\nsymbol\ndie\nleast\ntrouble\nshout\nexcept\nwrote\nseed\ntone\njoin\nsuggest\nclean\nbreak\nlady\nyard\nrise\nbad\nblow\noil\nblood\ntouch\ngrew\ncent\nmix\nteam\nwire\ncost\nlost\nbrown\nwear\ngarden\nequal\nsent\nchoose\nfell\nfit\nflow\nfair\nbank\ncollect\nsave\ncontrol\ndecimal\ngentle\nwoman\ncaptain\npractice\nseparate\ndifficult\ndoctor\nplease\nprotect\nnoon\nwhose\nlocate\nring\ncharacter\ninsect\ncaught\nperiod\nindicate\nradio\nspoke\natom\nhuman\nhistory\neffect\nelectric\nexpect\ncrop\nmodern\nelement\nhit\nstudent\ncorner\nparty\nsupply\nbone\nrail\nimagine\nprovide\nagree\nthus\ncapital\nwon't\nchair\ndanger\nfruit\nrich\nthick\nsoldier\nprocess\noperate\nguess\nnecessary\nsharp\nwing\ncreate\nneighbor\nwash\nbat\nrather\ncrowd\ncorn\ncompare\npoem\nstring\nbell\ndepend\nmeat\nrub\ntube\nfamous\ndollar\nstream\nfear\nsight\nthin\ntriangle\nplanet\nhurry\nchief\ncolony\nclock\nmine\ntie\nenter\nmajor\nfresh\nsearch\nsend\nyellow\ngun\nallow\nprint\ndead\nspot\ndesert\nsuit\ncurrent\nlift\nrose\ncontinue\nblock\nchart\nhat\nsell\nsuccess\ncompany\nsubtract\nevent\nparticular\ndeal\nswim\nterm\nopposite\nwife\nshoe\nshoulder\nspread\narrange\ncamp\ninvent\ncotton\nborn\ndetermine\nquart\nnine\ntruck\nnoise\nlevel\nchance\ngather\nshop\nstretch\nthrow\nshine\nproperty\ncolumn\nmolecule\nselect\nwrong\ngray\nrepeat\nrequire\nbroad\nprepare\nsalt\nnose\nplural\nanger\nclaim\ncontinent\noxygen\nsugar\ndeath\npretty\nskill\nwomen\nseason\nsolution\nmagnet\nsilver\nthank\nbranch\nmatch\nsuffix\nespecially\nfig\nafraid\nhuge\nsister\nsteel\ndiscuss\nforward\nsimilar\nguide\nexperience\nscore\napple\nbought\nled\npitch\ncoat\nmass\ncard\nband\nrope\nslip\nwin\ndream\nevening\ncondition\nfeed\ntool\ntotal\nbasic\nsmell\nvalley\nnor\ndouble\nseat\narrive\nmaster\ntrack\nparent\nshore\ndivision\nsheet\nsubstance\nfavor\nconnect\npost\nspend\nchord\nfat\nglad\noriginal\nshare\nstation\ndad\nbread\ncharge\nproper\nbar\noffer\nsegment\nslave\nduck\ninstant\nmarket\ndegree\npopulate\nchick\ndear\nenemy\nreply\ndrink\noccur\nsupport\nspeech\nnature\nrange\nsteam\nmotion\npath\nliquid\nlog\nmeant\nquotient\nteeth\nshell\nneck`;\n\n\nlet whitespace = /[\\r\\n]+/;\nlet words = top1000.split(whitespace);\nlet validwords = words.filter(word => word.length > 2);\n\nexport const sampleText = (range = validwords.length) => {\n  return validwords.slice(0, range);\n};","import { sampleText } from \"./sampletext\";\nimport { replaceChildren, addCoordinates } from \"./util\";\n\nexport class TypeTest {\n    constructor(grid) {\n        this.grid = grid;\n        this.width = Math.floor(this.grid.width * 0.7);\n        // this.height = Math.floor(this.grid.height * 0.8); \n        this.pos = this.calculatePos();\n        this.userWords = [];\n        this.currentWord = 0;\n        this.badkeystrokes = 0;\n        this.renderedWordBegin = 0;\n        this.renderedWordEnd = 0;\n        this.renderedElements= [];\n        this.numRows = 3;\n        \n        this.currentTime;\n        this.input = \"\";\n\n        this.topWords = sampleText();\n        this.ensureUserWords();\n    }\n\n    over() {\n        \n        this.clearPreviousRender();\n        let loserSpell = new Spell(this.grid);\n\n        loserSpell.cast([\"big\", \"red\", \"yellow\", \"mono\", \"right\", 'down', \"big\"]);\n        loserSpell.storedText =\n         (this.calculateWPM() + ' WPM');\n        this.grid.spells.push(loserSpell);\n\n        this.grid.exitTypetest();\n    }\n\n    calculateWPM() {\n        if (!this.currentTime) return 0;\n        let correctKeystrokes = 0;\n\n        for (let i = 0; i < this.currentWord; i++) {\n            let word = this.userWords[i];\n\n            if (!word.mistyped) {\n                correctKeystrokes += (word.word.length + 1);\n            }\n        }\n\n        return Math.floor(correctKeystrokes / 5);\n    }\n\n    clearPreviousRender() {\n        this.renderedElements.forEach(ele => ele.remove());\n    }\n\n    timesUp() {\n        if (!this.currentTime) return false;\n\n        let now = new Date();\n        let timeLeft =\n          60 - Math.floor((now.getTime() - this.currentTime.getTime()) / 1000);\n        return (timeLeft < 0);\n        \n    }\n\n    render() {\n        this.clearPreviousRender();\n        if (this.timesUp()) {\n            this.over()\n            return;\n        }\n        \n        this.renderPadding();\n        this.renderWordDisplay()\n        this.renderInput();\n\n    }  \n    \n    renderPadding() {\n        let numRows = this.numRows + 7; \n        let top = this.pos[0] - 2;\n        let left = this.pos[1] - 2;\n        let width = this.width + 4;\n\n        for (let i = 0; i < numRows; i++) {\n            for (let j = 0; j < width; j++) {\n                let child = document.createElement('span');\n                let el = this.grid.getElement([i + top, j + left]);\n                child.className = 'test-padding';\n                this.renderedElements.push(child);\n                replaceChildren(el, child);\n            }\n        }\n    }\n\n    renderInput() {\n        let top = this.numRows + this.pos[0] + 2;\n        let left = this.pos[1];\n        let inputwidth = this.width - 6;\n        let timeStart = this.width;\n        let time = this.calculateTime()\n\n        for (let i = 0; i < inputwidth; i++) {\n            let child = document.createElement(\"span\");\n            let el = this.grid.getElement([top, i + left]);\n            child.classList.add(\"test-input\", 'typetest');\n            this.renderedElements.push(child);\n\n            if (this.input[i]) child.innerText = this.input[i];\n            if (i === this.input.length) child.classList.add('current');\n            replaceChildren(el, child);\n            timeStart = i + left + 3;\n        }\n\n\n        for (let i = 0; i < time.length; i++) {\n            let child = document.createElement(\"span\");\n            let el = this.grid.getElement([top, i + timeStart]);\n            child.classList.add(\"test-time\", \"typetest\");\n            this.renderedElements.push(child);\n            child.innerText = time[i];\n            replaceChildren(el, child);\n        }\n    };\n    \n    renderWordDisplay() {\n        let wordsRendered = 0;\n        let firstColLength = 0;\n\n        for (let row = 0; row < this.numRows ; row += 2) {\n\n            let col = 0;\n            while (col <= this.width) {\n                let wordIdx = this.renderedWordBegin + wordsRendered;\n                let renderedWord = this.userWords[wordIdx];\n                if (col + renderedWord.word.length > this.width) break;\n\n                let renderCoord = [row, col];\n                this.renderWord(wordIdx, renderCoord);\n                wordsRendered += 1;\n           \n                col += renderedWord.word.length + 1;\n            }\n\n            if (row === 0) firstColLength = wordsRendered;\n\n        }\n \n        this.renderedWordEnd = this.renderedWordBegin + firstColLength;\n\n        if (this.currentWord >= this.renderedWordEnd) {\n            this.renderedWordBegin = this.currentWord;\n        } \n    }\n\n    calculateTime() {\n        \n        if (!this.currentTime) return '1:00';\n\n        let now = new Date();\n        let timeLeft = 60 - Math.floor((now.getTime() - this.currentTime.getTime()) / 1000);\n\n        if (timeLeft < 0) {\n            \n            return '0:00';\n        }\n\n        let min = Math.floor(timeLeft / 60);\n        let sec = timeLeft % 60;\n        sec = (sec < 10) ? '0' + sec : sec.toString();\n        let formattedTime = min + ':' + sec;\n        return formattedTime;\n    }\n\n    renderWord(idx, pos) {\n        let typeStart = addCoordinates(this.pos, [0,0])\n        let wordBegin = addCoordinates(typeStart, pos);\n        let word = this.userWords[idx];\n\n        let status = 'none';\n\n        if (word.mistyped) {\n            status = 'red';\n        } else if (idx < this.currentWord) {\n            status = 'success';\n        } else if (idx === this.currentWord) {\n            let matches = this.userWords[this.currentWord].word === this.input;\n            status = matches ? 'success' : 'current';\n        }\n        \n\n        for (let i = 0; i < word.word.length; i++) {\n            let eleCoord = addCoordinates(wordBegin, [0, i])\n            let ele = this.grid.getElement(eleCoord);\n\n            let letter = document.createElement(\"span\");\n            letter.innerHTML = word.word[i];\n            letter.classList.add(\"typetest\", status);\n            this.renderedElements.push(letter);\n            replaceChildren(ele, letter);\n        }\n\n    }\n\n    nextWord() {\n        if (this.input.length === 0) return;\n        this.ensureUserWords();\n        let currentWord = this.userWords[this.currentWord];\n        currentWord.mistyped = this.input !== currentWord.word;\n        this.input = '';\n        this.currentWord++;\n    }\n\n    validateCurrentWord() {\n        let currentWord = this.userWords[this.currentWord];\n        let inputRE = new RegExp('^' + this.input)\n        currentWord.mistyped = !inputRE.test(currentWord.word);\n    }\n\n\n    ensureUserWords() {\n        if (this.userWords.length < 50 + this.currentWord) {\n            for (let i = 0; i <= 50; i++) {\n                let randIdx = Math.floor(Math.random() * this.topWords.length);\n                let randWord = this.topWords[randIdx];\n                let word = {\n                    word: randWord,\n                    mistyped: false\n                }\n                \n                this.userWords.push(word);\n            } \n        }\n    }\n\n\n    calculatePos() {\n        let x = 5;\n        let y = Math.ceil((0.3 * this.grid.width) / 2);\n        return [x, y];\n    }\n\n    receive(e) {\n        //determines \n\n        if ([13, 32].includes(e.keyCode)) {\n            this.nextWord();\n        } else if ((e.keyCode >= 65 && e.keyCode < 91) || e.keyCode === 222) {\n            if (!this.currentTime) this.currentTime = new Date();\n            this.input += e.key;\n            this.validateCurrentWord()\n        } else if (e.keyCode === 27) {\n            this.grid.exitTypetest();\n            return;\n        } else if (e.keyCode === 8) {\n            if (this.input) this.input = this.input.slice(0, this.input.length - 1);\n            this.validateCurrentWord();\n        }\n        \n        this.render();\n    }\n\n} ","import Spell from './spell';\nimport * as Util from './util'\nimport { Snake } from './snake';\nimport keywords from \"./keywords\";\nimport { TypeTest } from './typetest';\n\nexport default class Grid {\n    constructor(root, input) {\n        this.root = root;\n        this.input = input;\n        \n        this.CELLSIZE = 25;\n        this.cursorPos = [0,0];\n        this.height = Math.ceil(root.offsetHeight / this.CELLSIZE) - 2;\n        this.width = Math.floor(root.offsetWidth / this.CELLSIZE);\n        this.spells = [];\n        this.currentSpell = new Spell(this);\n        this.framerate = 200;\n\n        this.typetest = null;\n        this.grid = this.populate();\n        this.play = true;\n\n        let keywordsList = document.getElementById(\"keywords-list\");\n        let logo = document.getElementById('logo');\n        let castNewSpell = document.getElementById('cast-new-spell');\n        castNewSpell.onclick = () => this.nextSpell();\n\n        logo.onclick = () => {\n            this.grid.push(this.currentSpell.generateRandomSpell());\n        }\n        Object.keys(keywords).forEach(kw => {\n          let li = document.createElement(\"li\");\n          li.innerText = kw;\n          li.onclick = () => this.currentSpell.receive(kw);\n          keywordsList.appendChild(li);\n        });\n\n        this.resizeGrid = this.resizeGrid.bind(this);\n        this.receiveInput = this.receiveInput.bind(this);\n        this.receiveClick = this.receiveClick.bind(this);\n\n        document.addEventListener(\"keydown\", this.receiveInput);\n\n        this.root.addEventListener(\"click\", (e) => {\n            let { pos } = e.target.dataset;\n            if (pos) this.receiveClick(pos);\n        });\n\n        window.onresize = this.resizeGrid;\n    }\n \n    populate() {\n        let grid = [];\n        for (let i = 0; i < this.height; i++) {\n            let rowArr = [];\n            let row = document.createElement('ul');\n            row.className = 'row';\n            for (let j = 0; j < this.width; j++) {\n                let cell = document.createElement('div')\n                cell.className = 'cell';\n                cell.dataset.pos = [i, j]\n                rowArr.push(cell);\n\n                row.appendChild(cell);\n            } \n            this.root.appendChild(row);\n            grid.push(rowArr);\n        }\n\n        return grid;\n    }\n\n\n    clearGridElements() {\n        while (this.root.firstChild) {\n            this.root.firstChild.remove();\n        }\n    }\n\n    resizeGrid() {\n        let root = document.getElementById('root');\n        this.clearGridElements();\n        this.height = Math.floor(root.offsetHeight / this.CELLSIZE) - 1;\n        this.width = Math.floor(root.offsetWidth / this.CELLSIZE);\n        this.grid = this.populate();\n    }\n\n    nextSpell() {\n        if (this.snakeMode()) {\n            this.currentSpell.clearPreviousRender()\n            this.currentSpell = new Spell(grid);\n        } else if (this.currentSpell.storedText || this.currentSpell.activeText) {\n            this.spells.push(this.currentSpell);\n            this.currentSpell = new Spell(grid);\n        } else {\n            let prevSpell = this.currentSpell;\n            this.currentSpell = new Spell(grid);\n            prevSpell.render()\n        }  \n    }\n\n    getElement(coordinates) {\n        let x = coordinates[0] % this.height;\n        let y = coordinates[1] % this.width;\n        if (x < 0) x += this.height;\n        if (y < 0) y += this.width;\n        return this.grid[x][y];\n    }\n\n\n    snakeMode() {\n        return (this.currentSpell instanceof Snake)\n    }\n\n    playSnake() {\n        let lastSpell = this.currentSpell;\n        this.spells.push(lastSpell);\n        let x = Math.floor(this.height / 2);\n        let y = Math.floor(this.width / 2);\n        \n        let centerPos = [x, y];\n\n        this.currentSpell = new Snake(this, centerPos)\n    }\n\n    playTypetest() {\n        // clearTimeout(this.timeout);\n        this.spells.push(this.currentSpell);\n        let inst = new Spell(this);\n        inst.cast([\"right\", \"green\"]);\n        inst.storedText = \"press esc to exit\";\n        inst.currentPos = [1, 1];\n        this.currentSpell = inst;\n        if (this.typetest) this.typetest.clearPreviousRender();\n        this.typetest = new TypeTest(this);\n        this.typetest.render();\n        \n        // this.currentSpell = null;\n    }\n\n    exitTypetest() {\n        if (this.typetest) this.typetest.clearPreviousRender();\n\n        this.typetest = null;\n        this.currentSpell.clearPreviousRender();\n        this.currentSpell = new Spell(this);\n    }\n\n    receiveClick(pos) {\n        if (this.snakeMode()) return;\n        let posArr = pos.split(\",\").map(i => parseInt(i));\n        if (this.currentSpell) this.currentSpell.currentPos = posArr;\n    }\n\n    updateCurrentPosition(keycode) {\n        \n        let delta; \n\n        switch (keycode) {\n          case 37:\n            delta = [0, -1];\n            break;\n          case 38:\n            delta = [-1, 0];\n            break;\n          case 39:\n            delta = [0, 1];\n            break;\n          case 40:\n            delta = [1, 0];\n            break;\n        }\n        \n\n        if (this.snakeMode()) {\n            this.currentSpell.receiveInput(delta);\n            return;\n        }\n\n        let { currentPos } = this.currentSpell;\n        this.currentSpell.currentPos = Util.addCoordinates(delta, currentPos);\n        this.currentSpell.render();\n    }\n\n    randomPosition() {\n        let x = Math.floor(Math.random() * this.height);\n        let y = Math.floor(Math.random() * this.width);\n\n        return [x,y];\n    }\n\n    receiveInput(e) {\n        if (e.keyCode === 27) {\n            if (this.currentSpell) this.currentSpell.clearPreviousRender();\n            this.currentSpell = new Spell(this); \n        }\n\n        if (this.typetest) {\n          this.typetest.receive(e);\n        } else if (e.keyCode === 13 || e.keyCode === 32) {\n          this.nextSpell();\n        } else if (e.keyCode >= 65 && e.keyCode < 91) {\n          if (this.snakeMode()) return;\n          this.currentSpell.receive(e.key);\n        } else if (e.keyCode === 8 && this.currentSpell) {\n          if (this.snakeMode()) return;\n          this.currentSpell.deleteCharacter();\n        } else if (e.keyCode <= 40 && e.keyCode >= 37) {\n          this.updateCurrentPosition(e.keyCode);\n        }\n\n    }\n    \n    trimSpells() {\n        if (this.spells.length < 100) return;\n        let diff = this.spells.length - 100;\n        for (let i = 0; i < diff; i++) {\n            this.spells[i].clearPreviousRender();\n        }\n        this.spells = this.spells.slice(diff);\n    }\n\n    frame() {\n        this.trimSpells();\n        this.spells.forEach(spell => spell.move());\n    \n        this.currentSpell.move();\n        if (this.typetest) {\n            this.typetest.render();\n        }\n    }\n\n\n\n    animate(rate) {\n        // if (this.typetest) return;\n\n        this.framerate = rate || this.framerate;\n        this.timeout = setTimeout(() => {\n            this.frame();\n            this.animate();\n        }, this.framerate);\n    }\n\n\n}","import Grid from './grid';\nimport Spell from './spell';\nimport { sampleText } from \"./sampletext\";\n\nimport \"./styles/index.scss\";\nimport { TypeTest } from './typetest';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const root = document.getElementById('root');\n    const input = document.getElementById('input');\n    window.Spell = Spell;\n    const grid = new Grid(root, input);\n\n    grid.animate();\n    window.grid = grid;\n    window.sampleText = sampleText;\n    window.typetest = new TypeTest(grid);\n\n})"],"sourceRoot":""}